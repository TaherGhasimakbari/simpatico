/*
* Simpatico - Simulation Package for Polymeric and Molecular Liquids
*
* Copyright 2010 - 2014, The Regents of the University of Minnesota
* Distributed under the terms of the GNU General Public License.
*/

#include <util/accumulators/Average.h>
#include <util/misc/ioUtil.h>
#include <util/format/Int.h>
#include <util/format/Dbl.h>

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <math.h>
#include <mpi.h>

using namespace std;
using namespace Util;

#define Master 0
int main()
{
   MPI_Init(NULL, NULL);
   int rank;
   int size;
   MPI_Comm_rank(MPI_COMM_WORLD,&rank);
   MPI_Comm_size(MPI_COMM_WORLD,&size);
   
   ifstream inFile;
   Average accumulator;
   accumulator.clear();

   std::string path;
   std::string in_file;
   std::string out_file;
   unsigned int N_Begin;
   unsigned int N_Columns;
   unsigned int S_Column;

   if (rank==Master) {
       std::cout<<"Path to Data: ";std::cin>>path;for (int r = 1; r<size; r++) MPI_Send(&path, path.length(), MPI::CHAR, r, 0, MPI_COMM_WORLD);
       std::cout<<"Input File: ";std::cin>>in_file;for (int r = 1; r<size; r++) MPI_Send(&in_file, in_file.length(), MPI::CHAR, r, 1, MPI_COMM_WORLD);
       std::cout<<"Output File: ";std::cin>>out_file;for (int r = 1; r<size; r++) MPI_Send(&out_file, out_file.length(), MPI::CHAR, r, 2, MPI_COMM_WORLD);
       std::cout<<"Beginning Line of Sampling: ";std::cin>>N_Begin;for (int r = 1; r<size; r++) MPI_Send(&N_Begin, 1, MPI_INT, r, 3, MPI_COMM_WORLD);
       std::cout<<"Number of Columns: ";std::cin>>N_Columns;for (int r = 1; r<size; r++) MPI_Send(&N_Columns, 1, MPI_INT, r, 4, MPI_COMM_WORLD);
       std::cout<<"The Column to Sample: ";std::cin>>S_Column;for (int r = 1; r<size; r++) MPI_Send(&S_Column, 1, MPI_INT, r, 5, MPI_COMM_WORLD);
   } else {
       int l;
       MPI_Status status;

       MPI_Probe(Master, 0, MPI_COMM_WORLD, &status);
       MPI_Get_count(&status, MPI::CHAR, &l);
       MPI_Recv(&path, l, MPI::CHAR, Master, 0, MPI_COMM_WORLD, &status);
       
       MPI_Probe(Master, 1, MPI_COMM_WORLD, &status);
       MPI_Get_count(&status, MPI::CHAR, &l);
       MPI_Recv(&in_file, l, MPI::CHAR, Master, 1, MPI_COMM_WORLD, &status);
       
       MPI_Probe(Master, 2, MPI_COMM_WORLD, &status);
       MPI_Get_count(&status, MPI::CHAR, &l);
       MPI_Recv(&out_file, l, MPI::CHAR, Master, 2, MPI_COMM_WORLD, &status);
       
       MPI_Probe(Master, 3, MPI_COMM_WORLD, &status);
       MPI_Get_count(&status, MPI_INT, &l);
       MPI_Recv(&N_Begin, l, MPI_INT, Master, 3, MPI_COMM_WORLD, &status);
       
       MPI_Probe(Master, 4, MPI_COMM_WORLD, &status);
       MPI_Get_count(&status, MPI_INT, &l);
       MPI_Recv(&N_Columns, l, MPI_INT, Master, 4, MPI_COMM_WORLD, &status);
       
       MPI_Probe(Master, 5, MPI_COMM_WORLD, &status);
       MPI_Get_count(&status, MPI_INT, &l);
       MPI_Recv(&S_Column, l, MPI_INT, Master, 5, MPI_COMM_WORLD, &status);
   }

   std::string path_in;
   std::string path_out;
   path_in=path+in_file;
   path_in=path_in+toString(rank);
   path_out=path+out_file;
   path_out=path_out+toString(rank);
   inFile.open(path_in.c_str(), ios_base::in);

   //std::cout<<"rank "<<rank<<":"<<path_in<<"\n";
   //std::cout<<"rank "<<rank<<":"<<path_out<<"\n";

   string lines_ignored;
   for(unsigned int l=0;l<N_Begin;l++){
   getline(inFile, lines_ignored);
   std::cout<<lines_ignored<<"\n";
   MPI_Barrier(MPI_COMM_WORLD);

   std::cout<<setw(3)<<rank<<":"<<"\n";
   std::cout<<"input directory:"<<path_in<<"\n";
   std::cout<<"output directory:"<<path_out<<"\n";
   std::cout<<"Last Line Ignored:"<<"\n";
   std::cout<<lines_ignored<<"\n\n";
   MPI_Barrier(MPI_COMM_WORLD);

   if (!inFile) cerr << "can't open Data!\n";

   double data;
   for(unsigned int i=0; i<S_Column; i++) inFile >> data;
   //for(unsigned int i = N_Begin; i < N_Finish; i++){
   while(!inFile.eof()){
      for(unsigned int j=0; j<N_Columns; j++) inFile >> data;
      accumulator.sample(data);
   }

   inFile.close();

   ofstream outFile;
   outFile.open(path_out.c_str());
   std::cout<<setw(3)<<rank<<": writing auto-correlation results into file...";
   accumulator.output(outFile);
   std::cout<<"results were written to file: "<<path_out<<"\n";
   outFile.close();

   MPI_Finalize();
}
